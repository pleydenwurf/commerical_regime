1 reference
This version—where Apache is configured as a reverse proxy using mod_auth_openidc to enable Keycloak (OIDC) authentication for OpenGrok—is the correct and recommended approach!

Why this works:

OpenGrok itself does not support OIDC authentication natively.
Apache (with mod_auth_openidc) is a well-supported way to add OIDC authentication in front of web apps like OpenGrok.
The playbook:
Installs Apache and mod_auth_openidc.
Sets up an Apache virtual host (template assumed to configure OIDC and reverse proxy to Tomcat/OpenGrok).
Secures OpenGrok by binding Tomcat only to localhost.
Handles SSL, permissions, and service state.
Checks Apache config before enabling.
Best practices shown:

Only allows access to OpenGrok through the authenticated proxy.
Uses variables and templates for flexibility.
Has steps for SSL and permissions.
Includes config testing.
What you need to ensure:

Your opengrok-oidc.conf.j2 template correctly configures mod_auth_openidc and proxying.
Keycloak client is configured with correct redirect URIs (matching your Apache HTTPS endpoint).
The Tomcat/OpenGrok backend is not directly accessible from outside.
You have the correct client secret/ID and Keycloak realm info.
Summary:
This approach is secure, maintainable, and aligns with best practices for integrating OIDC with applications that don’t have native support. If you want an example Apache config or more guidance on the opengrok-oidc.conf.j2 template, let me know!

does this opengrok-oidc.conf.j2 look ok?
1 reference
Your opengrok-oidc.conf.j2 template is well-structured and follows best practices for securing OpenGrok behind Apache with Keycloak OIDC authentication:

Key strengths:

HTTP to HTTPS redirection ensures secure access.
SSL configuration uses variables, making it flexible.
Security headers (HSTS, X-Frame-Options, etc.) are included.
OIDC settings (provider metadata, client ID/secret, redirect, logout, etc.) are correctly templated and comprehensive.
Sessions, claims, and user headers are handled robustly.
Reverse proxy is set up to only expose OpenGrok via Apache.
Authentication enforced for all content except explicit public endpoints (/health, static assets).
Public health endpoint for monitoring.
Logout is cleanly redirected to Keycloak logout.
Static assets exemption is optional and may improve UX/performance.
Suggestions/considerations:

OIDCRedirectURI:
Ensure your Keycloak client’s redirect URI matches https://your-fqdn/oidc_redirect.
Headers:
You’re passing user info as headers—ensure your OpenGrok deployment can log or utilize these if needed.
Static Assets:
The <LocationMatch> for static assets is a good touch. If you want full protection, you can remove or tighten it.
Crypto Passphrase:
Make sure to set a strong, secret value for oidc_crypto_passphrase in production.
ProxyPreserveHost:
This is correct for most cases, but verify OpenGrok works as expected behind the proxy.
Testing:
After applying this, test login/logout, user info headers, and public endpoints.
Summary:
This template is ready for production with just minor adjustments and thorough testing. It’s a robust and secure way to deploy OpenGrok behind Keycloak/OIDC.

If you need an example Keycloak client configuration or want to tighten/relax authentication for certain paths, let me know!

Correct Approach Summary
You're absolutely right. OpenGrok doesn't have a built-in OIDC plugin. The standard approaches are:
1. Apache with mod_auth_openidc (Recommended)

Most common and well-documented approach
mod_auth_openidc handles all OIDC complexity
OpenGrok receives user info via HTTP headers
Easy to configure and maintain

2. Nginx with lua-resty-openidc

Alternative for Nginx environments
Requires Lua support in Nginx
More complex setup but very flexible

3. Keycloak Gatekeeper (Deprecated)

Previously popular but now deprecated
Replaced by Keycloak's newer solutions

Keycloak Client Configuration
For either approach, configure your Keycloak client with:
Client ID: opengrok-client
Client Protocol: openid-connect
Access Type: confidential
Valid Redirect URIs: 
  - https://your-opengrok-server.domain.com/oidc_redirect (Apache)
  - https://your-opengrok-server.domain.com/redirect_uri (Nginx)
Standard Flow Enabled: ON
Key Benefits of This Approach:

No OpenGrok modifications needed - OpenGrok runs unchanged
Security handled at proxy level - Authentication happens before requests reach OpenGrok
User information passed via headers - OpenGrok can access user details through X-Forwarded-* headers
SSL termination - Proxy handles HTTPS
Session management - Proxy manages OIDC sessions

The Apache approach with mod_auth_openidc is generally recommended due to its maturity and extensive documentation.RetryClaude does not have the ability to run the code it generates yet.Claude can make mistakes. Please double-check responses. Sonnet 4

If you already have an Apache instance running as a reverse proxy in front of Tomcat (which serves OpenGrok), not everything in the provided Ansible script is required. Here’s what you need vs. what you can skip:

What’s Only Needed If Not Already Present
Apache installation:
If Apache is already installed and running, you can skip installation steps.
Tomcat installation & management:
If Tomcat is already running OpenGrok, you don’t need to manage Tomcat’s installation or service via this script (unless you want Ansible to do it for consistency).
What You Still Need To Do
mod_auth_openidc installation:
You’ll need to install and enable the libapache2-mod-auth-openidc module if it isn’t already enabled.
Apache module enabling:
Ensure the necessary Apache modules are enabled: ssl, proxy, proxy_http, headers, rewrite, and auth_openidc.
Apache site configuration:
You must deploy (and enable) a site config like opengrok-oidc.conf (or integrate its contents into your existing Apache config) to:
Set up OIDC with Keycloak
Proxy requests to Tomcat/OpenGrok
Enforce authentication
SSL certificate:
If your existing Apache instance already has SSL configured for your OpenGrok domain, you don’t need to create or copy new certificates. Just reference them in your site config.
Tomcat binding:
It is a security best practice to ensure Tomcat only listens on localhost. If you’ve already done this, you can skip that step.
Restart services:
You’ll still need to reload/restart Apache after updating configs.
What You Can Skip If Already Present
Creating Apache directories
Disabling the default Apache site (if you already have your custom config in use)
Creating self-signed certificates (if you already have valid SSL)
Creating SSL certificate directory/permissions (if already set up)
Starting/enabling Tomcat/Apache (if already managed elsewhere)
Summary Table
Task	Needed if Already Have Apache+Tomcat?
Install Apache	No
Install Tomcat	No
Install mod_auth_openidc	Yes (if not already installed)
Enable required Apache modules	Yes (if not already enabled)
Deploy Apache OIDC site config	Yes
Configure SSL certificates in Apache site config	Only if not already configured
Ensure Tomcat binds only to localhost	Yes (if not already done)
Restart/reload Apache	Yes
Bottom Line:
If your Apache already proxies to OpenGrok and handles SSL, you mainly need to:

Install and enable mod_auth_openidc
Create/update your Apache site config to add OIDC authentication for OpenGrok
Restart Apache
You can skip installation and generic setup tasks that are already complete. Let me know if you want a concise checklist or an example of just the essential changes!



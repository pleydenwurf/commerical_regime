# templates/opengrok_configuration.xml.j2
<?xml version="1.0" encoding="UTF-8"?>
<java version="1.8.0_25" class="java.beans.XMLDecoder">
 <object class="org.opengrok.indexer.configuration.Configuration" id="Configuration0">
  <void property="sourceRoot">
   <string>{{ opengrok_src }}</string>
  </void>
  <void property="dataRoot">
   <string>{{ opengrok_data }}</string>
  </void>
  <void property="repositories">
   <void method="add">
    <string>{{ opengrok_src }}</string>
   </void>
  </void>
  <void property="projectsEnabled">
   <boolean>true</boolean>
  </void>
  <void property="historyEnabled">
   <boolean>true</boolean>
  </void>
  <void property="remoteScmSupported">
   <boolean>true</boolean>
  </void>
  <void property="optimizeDatabase">
   <boolean>true</boolean>
  </void>
  <void property="useHistoryCache">
   <boolean>true</boolean>
  </void>
  <void property="generateHtml">
   <boolean>true</boolean>
  </void>
  <void property="indexVersionedFilesOnly">
   <boolean>false</boolean>
  </void>
  <void property="allowLeadingWildcard">
   <boolean>true</boolean>
  </void>
 </object>
</java>

---
# templates/logging.properties.j2
handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# File handler configuration
java.util.logging.FileHandler.pattern = {{ opengrok_log }}/opengrok.log
java.util.logging.FileHandler.limit = 10000000
java.util.logging.FileHandler.count = 10
java.util.logging.FileHandler.append = true
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# Console handler configuration
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

# Root logger level
.level = INFO

# OpenGrok specific loggers
org.opengrok.level = INFO
org.opengrok.indexer.level = INFO
org.opengrok.web.level = INFO

---
# templates/opengrok-indexer.sh.j2
#!/bin/bash

# OpenGrok Indexer Script
# Generated by Ansible

export JAVA_HOME="{{ java_home }}"
export OPENGROK_INSTANCE_BASE="{{ opengrok_data }}"
export OPENGROK_TOMCAT_BASE="{{ tomcat_home }}"

OPENGROK_HOME="{{ opengrok_home }}/current"
OPENGROK_JAR="$OPENGROK_HOME/lib/opengrok.jar"
OPENGROK_CONFIG="{{ opengrok_etc }}/configuration.xml"
OPENGROK_SRC="{{ opengrok_src }}"
OPENGROK_DATA="{{ opengrok_data }}"
OPENGROK_LOG="{{ opengrok_log }}/indexer.log"

# Ensure directories exist
mkdir -p "{{ opengrok_log }}"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$OPENGROK_LOG"
}

log_message "Starting OpenGrok indexing..."

# Check if Java is available
if [ ! -x "$JAVA_HOME/bin/java" ]; then
    log_message "ERROR: Java not found at $JAVA_HOME/bin/java"
    exit 1
fi

# Check if OpenGrok jar exists
if [ ! -f "$OPENGROK_JAR" ]; then
    log_message "ERROR: OpenGrok jar not found at $OPENGROK_JAR"
    exit 1
fi

# Run OpenGrok indexer
log_message "Running indexer with source: $OPENGROK_SRC, data: $OPENGROK_DATA"

"$JAVA_HOME/bin/java" \
    -Djava.util.logging.config.file="{{ opengrok_etc }}/logging.properties" \
    -Xmx2048m \
    -jar "$OPENGROK_JAR" \
    -c /usr/bin/ctags \
    -s "$OPENGROK_SRC" \
    -d "$OPENGROK_DATA" \
    -H -P -S -G \
    -W "$OPENGROK_CONFIG" \
    -U "http://localhost:8080/source" \
    --leadingWildCards on \
    >> "$OPENGROK_LOG" 2>&1

RESULT=$?

if [ $RESULT -eq 0 ]; then
    log_message "OpenGrok indexing completed successfully"
else
    log_message "ERROR: OpenGrok indexing failed with exit code $RESULT"
fi

exit $RESULT

---
# templates/opengrok-sync.py.j2
#!/usr/bin/env python3
"""
OpenGrok Python Sync Tool
Generated by Ansible

This tool helps synchronize repositories and trigger re-indexing
"""

import os
import sys
import subprocess
import logging
import argparse
import requests
import json
from pathlib import Path

# Configuration
OPENGROK_SRC = "{{ opengrok_src }}"
OPENGROK_URL = "http://localhost:8080/source"
OPENGROK_API_URL = f"{OPENGROK_URL}/api/v1"
INDEXER_SCRIPT = "{{ opengrok_home }}/bin/opengrok-indexer.sh"
LOG_FILE = "{{ opengrok_log }}/sync.log"

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def sync_git_repository(repo_path):
    """Sync a Git repository"""
    try:
        if not os.path.exists(os.path.join(repo_path, '.git')):
            logger.warning(f"Not a Git repository: {repo_path}")
            return False
            
        logger.info(f"Syncing Git repository: {repo_path}")
        result = subprocess.run(['git', 'pull'], 
                              cwd=repo_path, 
                              capture_output=True, 
                              text=True)
        
        if result.returncode == 0:
            logger.info(f"Successfully synced: {repo_path}")
            return True
        else:
            logger.error(f"Failed to sync {repo_path}: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"Error syncing {repo_path}: {str(e)}")
        return False

def sync_all_repositories():
    """Sync all repositories in the source directory"""
    if not os.path.exists(OPENGROK_SRC):
        logger.error(f"Source directory not found: {OPENGROK_SRC}")
        return False
    
    synced_count = 0
    total_count = 0
    
    for item in os.listdir(OPENGROK_SRC):
        item_path = os.path.join(OPENGROK_SRC, item)
        if os.path.isdir(item_path):
            total_count += 1
            if sync_git_repository(item_path):
                synced_count += 1
    
    logger.info(f"Synced {synced_count}/{total_count} repositories")
    return synced_count > 0

def trigger_reindex():
    """Trigger OpenGrok re-indexing"""
    try:
        logger.info("Triggering OpenGrok re-indexing...")
        result = subprocess.run([INDEXER_SCRIPT], 
                              capture_output=True, 
                              text=True)
        
        if result.returncode == 0:
            logger.info("Re-indexing completed successfully")
            return True
        else:
            logger.error(f"Re-indexing failed: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"Error triggering re-index: {str(e)}")
        return False

def get_opengrok_status():
    """Get OpenGrok status via API"""
    try:
        response = requests.get(f"{OPENGROK_API_URL}/system/status", timeout=10)
        if response.status_code == 200:
            status = response.json()
            logger.info(f"OpenGrok status: {json.dumps(status, indent=2)}")
            return status
        else:
            logger.warning(f"Failed to get status: HTTP {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"Error getting OpenGrok status: {str(e)}")
        return None

def main():
    parser = argparse.ArgumentParser(description='OpenGrok Python Sync Tool')
    parser.add_argument('--sync', action='store_true', 
                       help='Sync all repositories')
    parser.add_argument('--reindex', action='store_true', 
                       help='Trigger re-indexing')
    parser.add_argument('--status', action='store_true', 
                       help='Get OpenGrok status')
    parser.add_argument('--repo', type=str, 
                       help='Sync specific repository')
    parser.add_argument('--full', action='store_true', 
                       help='Perform full sync and reindex')
    
    args = parser.parse_args()
    
    if args.status:
        get_opengrok_status()
    
    if args.repo:
        repo_path = os.path.join(OPENGROK_SRC, args.repo)
        sync_git_repository(repo_path)
    
    if args.sync or args.full:
        sync_all_repositories()
    
    if args.reindex or args.full:
        trigger_reindex()
    
    if not any([args.sync, args.reindex, args.status, args.repo, args.full]):
        parser.print_help()

if __name__ == '__main__':
    main()

---
# templates/tomcat.service.j2
[Unit]
Description=Apache Tomcat Web Application Container for OpenGrok
After=network.target

[Service]
Type=forking

Environment=JAVA_HOME={{ java_home }}
Environment=CATALINA_PID={{ tomcat_home }}/temp/tomcat.pid
Environment=CATALINA_HOME={{ tomcat_home }}
Environment=CATALINA_BASE={{ tomcat_home }}
Environment="CATALINA_OPTS=-Xms512M -Xmx2048M -server -XX:+UseParallelGC"
Environment="JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom"
Environment=OPENGROK_TOMCAT_BASE="{{ tomcat_home }}"

ExecStart={{ tomcat_home }}/bin/startup.sh
ExecStop={{ tomcat_home }}/bin/shutdown.sh

User={{ opengrok_user }}
Group={{ opengrok_group }}
UMask=0007
RestartSec=10
Restart=always

[Install]
WantedBy=multi-user.target

---
# templates/opengrok-indexer.service.j2
[Unit]
Description=OpenGrok Indexer Service
After=tomcat-opengrok.service
Requires=tomcat-opengrok.service

[Service]
Type=oneshot
User={{ opengrok_user }}
Group={{ opengrok_group }}
ExecStart={{ opengrok_home }}/bin/opengrok-indexer.sh
WorkingDirectory={{ opengrok_home }}
Environment=JAVA_HOME={{ java_home }}

[Install]
WantedBy=multi-user.target

---
# templates/opengrok-indexer.timer.j2
[Unit]
Description=Run OpenGrok Indexer every 6 hours
Requires=opengrok-indexer.service

[Timer]
OnBootSec=10min
OnUnitActiveSec=6h
Persistent=true

[Install]
WantedBy=timers.target
# templates/activate-opengrok.sh.j2
#!/bin/bash
# OpenGrok Python Virtual Environment Activation Script
# Generated by Ansible

VENV_PATH="{{ venv_path }}"
OPENGROK_HOME="{{ opengrok_home }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}Activating OpenGrok Python Virtual Environment${NC}"

if [ -f "$VENV_PATH/bin/activate" ]; then
    source "$VENV_PATH/bin/activate"
    echo -e "${GREEN}✓ Virtual environment activated${NC}"
    echo -e "${YELLOW}Available OpenGrok Python tools:${NC}"
    echo "  - opengrok-deploy"
    echo "  - opengrok-indexer" 
    echo "  - opengrok-mirror"
    echo "  - opengrok-sync"
    echo "  - opengrok-projadm"
    echo ""
    echo -e "${YELLOW}Configuration file:${NC} $OPENGROK_HOME/etc/opengrok-python.conf"
    echo -e "${YELLOW}Logs directory:${NC} /var/log/opengrok-python"
    echo ""
    echo -e "${YELLOW}Usage examples:${NC}"
    echo "  opengrok-mirror --help"
    echo "  opengrok-sync --help"
    echo "  opengrok-deploy --help"
    echo ""
else
    echo -e "${RED}✗ Virtual environment not found at $VENV_PATH${NC}"
    exit 1
fi

---
# templates/opengrok-python.conf.j2
# OpenGrok Python Tools Configuration
# Generated by Ansible

[DEFAULT]
# OpenGrok installation paths
opengrok_jar = {{ opengrok_home }}/current/lib/opengrok.jar
opengrok_base = {{ opengrok_home }}
data_root = /var/opengrok
source_root = /var/opengrok/src
log_level = INFO

# Tomcat settings
tomcat_root = /opt/tomcat
webapp_name = source

# Indexer settings
ctags_path = /usr/bin/ctags
java_home = /usr/lib/jvm/java-11-openjdk

# Repository settings
repositories_root = /var/opengrok/src
mirror_root = /var/opengrok/mirror

# Logging
log_file = /var/log/opengrok-python/opengrok-tools.log
log_format = %(asctime)s - %(name)s - %(levelname)s - %(message)s

# Network settings
timeout = 300
retries = 3

[mirror]
# Repository mirroring settings
batch_size = 10
parallel_workers = 4
cleanup_old = true
cleanup_days = 30

[sync]
# Synchronization settings
hook_timeout = 120
use_projects = true
check_index = true

[deploy]
# Deployment settings
restart_tomcat = true
backup_config = true

---
# templates/opengrok-mirror.sh.j2
#!/bin/bash
# OpenGrok Mirror Wrapper Script
# Generated by Ansible

VENV_PATH="{{ venv_path }}"
CONFIG_FILE="{{ opengrok_home }}/etc/opengrok-python.conf"
LOG_FILE="/var/log/opengrok-python/mirror.log"

# Activate virtual environment
source "$VENV_PATH/bin/activate"

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")"

# Run opengrok-mirror with configuration
exec opengrok-mirror \
    --config "$CONFIG_FILE" \
    --log "$LOG_FILE" \
    "$@"

---
# templates/opengrok-sync.sh.j2
#!/bin/bash
# OpenGrok Sync Wrapper Script
# Generated by Ansible

VENV_PATH="{{ venv_path }}"
CONFIG_FILE="{{ opengrok_home }}/etc/opengrok-python.conf"
LOG_FILE="/var/log/opengrok-python/sync.log"

# Activate virtual environment
source "$VENV_PATH/bin/activate"

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")"

# Run opengrok-sync with configuration
exec opengrok-sync \
    --config "$CONFIG_FILE" \
    --log "$LOG_FILE" \
    "$@"

---
# templates/opengrok-deploy.sh.j2
#!/bin/bash
# OpenGrok Deploy Wrapper Script
# Generated by Ansible

VENV_PATH="{{ venv_path }}"
CONFIG_FILE="{{ opengrok_home }}/etc/opengrok-python.conf"
LOG_FILE="/var/log/opengrok-python/deploy.log"

# Activate virtual environment
source "$VENV_PATH/bin/activate"

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")"

# Run opengrok-deploy with configuration
exec opengrok-deploy \
    --config "$CONFIG_FILE" \
    --log "$LOG_FILE" \
    "$@"

---
# templates/opengrok-mirror.service.j2
[Unit]
Description=OpenGrok Repository Mirror Service
After=network.target

[Service]
Type=oneshot
User={{ opengrok_user }}
Group={{ opengrok_group }}
WorkingDirectory={{ opengrok_home }}
Environment=PYTHONPATH={{ venv_path }}/lib/python3.11/site-packages
ExecStart={{ opengrok_home }}/bin/opengrok-mirror.sh --batch
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target

---
# templates/opengrok-mirror.timer.j2
[Unit]
Description=Run OpenGrok Repository Mirror every 4 hours
Requires=opengrok-mirror.service

[Timer]
OnBootSec=15min
OnUnitActiveSec=4h
Persistent=true

[Install]
WantedBy=timers.target

---
# templates/opengrok-python-logrotate.j2
/var/log/opengrok-python/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 {{ opengrok_user }} {{ opengrok_group }}
    postrotate
        systemctl reload opengrok-mirror.service || true
    endscript
}

---
# templates/README-python-tools.md.j2
# OpenGrok Python Tools

This installation includes the OpenGrok Python tools package installed in a virtual environment.

## Installation Details

- **Virtual Environment**: `{{ venv_path }}`
- **Configuration**: `{{ opengrok_home }}/etc/opengrok-python.conf`
- **Wrapper Scripts**: `{{ opengrok_home }}/bin/`
- **Logs**: `/var/log/opengrok-python/`

## Quick Start

### Activate Virtual Environment

```bash
# Method 1: Direct activation
source {{ venv_path }}/bin/activate

# Method 2: Using wrapper script
source {{ opengrok_home }}/bin/activate-opengrok.sh
```

### Available Tools

- **opengrok-deploy**: Deploy OpenGrok web application
- **opengrok-indexer**: Index source code repositories
- **opengrok-mirror**: Mirror remote repositories
- **opengrok-sync**: Synchronize repositories and re-index
- **opengrok-projadm**: Project administration
- **opengrok-reindex-project**: Re-index specific projects

### Common Usage Examples

#### Mirror Repositories
```bash
# Using wrapper script
{{ opengrok_home }}/bin/opengrok-mirror.sh --batch

# Or with virtual environment activated
opengrok-mirror --config {{ opengrok_home }}/etc/opengrok-python.conf --batch
```

#### Sync and Re-index
```bash
# Using wrapper script
{{ opengrok_home }}/bin/opengrok-sync.sh

# Or with virtual environment activated
opengrok-sync --config {{ opengrok_home }}/etc/opengrok-python.conf
```

#### Deploy Web Application
```bash
# Using wrapper script
{{ opengrok_home }}/bin/opengrok-deploy.sh

# Or with virtual environment activated
opengrok-deploy --config {{ opengrok_home }}/etc/opengrok-python.conf
```

## Configuration

Edit `{{ opengrok_home }}/etc/opengrok-python.conf` to customize settings:

- Repository paths
- Indexer options
- Logging configuration
- Network timeouts
- Mirroring settings

## Systemd Services

{% if enable_mirror_timer %}
- **opengrok-mirror.service**: One-shot service for repository mirroring
- **opengrok-mirror.timer**: Timer to run mirroring every 4 hours

```bash
# Check timer status
sudo systemctl status opengrok-mirror.timer

# Manually run mirror service
sudo systemctl start opengrok-mirror.service

# View logs
sudo journalctl -u opengrok-mirror.service
```
{% endif %}

## Troubleshooting

### Check Installation
```bash
# Verify virtual environment
ls -la {{ venv_path }}/bin/

# Check installed packages
source {{ venv_path }}/bin/activate
pip list | grep opengrok

# Test import
python -c "import opengrok_tools; print(opengrok_tools.__version__)"
```

### Check Logs
```bash
# View recent logs
tail -f /var/log/opengrok-python/*.log

# View systemd logs
sudo journalctl -u opengrok-mirror.service -f
```

### Common Issues

1. **Permission Errors**: Ensure files are owned by `{{ opengrok_user }}:{{ opengrok_group }}`
2. **Import Errors**: Verify virtual environment is activated
3. **Configuration Errors**: Check `{{ opengrok_home }}/etc/opengrok-python.conf`

## Manual Installation Commands

If you need to reinstall or upgrade:

```bash
# Activate virtual environment
source {{ venv_path }}/bin/activate

# Upgrade OpenGrok tools
pip install --upgrade opengrok-tools

# Reinstall with specific version
pip install opengrok-tools=={{ opengrok_python_version }}
```

---
*Generated by Ansible on {{ ansible_date_time.iso8601 }}*